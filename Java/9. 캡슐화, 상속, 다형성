# 객체 지향 프로그래밍의 특징
## **캡슐화 (Encapsulation)**
클래스에서 field, method등을 private으로 선언을 해 하나로 묶어 실제 구현 내용을 외부에 공개하지 않는 것 - ***information hiding (정보 은닉) ***</br>
외부 객체는 객체 내부 구조를 알지 못하며 객체가 노출해 제공하는 필드와 메소드만 이용 가능하다. 캡슐화된 멤버를 노출시킬 것인지 숨길 것인지 결정하기 위해 **접근 제한자(Access Modifier)**를 사용한다.

</br>

### private
field, method에 사용 가능 (constructor도 사용 가능)

##### 사용 목적 
1) class를 사용하는 다른 class에서 사용하지 못하게 하는 것이 목적
	하지만, class 내부에서는 제한없이 사용 가능
2) 일반적으로 object oriented programming을 할 때, field는 private로 선언하는 게 일반적.
	대신 private으로 선언한 field들에 대해, 다른 class에서 해당 field를 사용하기 위해 public으로 선언한 **getter/setter method**를 제공함
3) method에 대해 private으로 선언한 것은 class 내부적으로만 사용하고 외부에 오픈X 의미
</br>

```java
public class Circle {
	private double radius;
	private String name;
	private static int numberOfObjects = 0; // new로 생성된 인스턴스 갯수를 관리

	public Circle() {
		this.radius = 1;
		numberOfObjects++;
	}

	public Circle(double newradius) {
		this.radius = newradius;
		numberOfObjects++;
	}

	public Circle(String newName) {
		name = newName;
	}

	// getter method
	public double getRadius() {
		return radius;
	}

	// setter method
	public void setRadius(double radius) {
		if (radius >= 0) {
			this.radius = radius;
		} else {
			this.radius = 0;
		}
	}

	// getter method
	public static int getNumberOfObjects() {
		return numberOfObjects;
	}

	// 원의 면적 구하는 method 선언
	public double getArea() {
		return radius * radius * Math.PI;
	}

	// 원의 둘레 구하는 method 선언
	public double getPerimeter() {
		return 2 * Math.PI * radius;
	}

	private void printPrivateHello() {
		System.out.println("Hello, this is private method");
	}
}
```
```java
public class TestCircleWithPrivateFields {

	public static void main(String[] args) {
		Circle circle = new Circle(5.0);

		System.out.println("circle radius : " + circle.getRadius() + ", area : " + circle.getArea() + ", 생성인스턴스 갯수: "
				+ circle.getNumberOfObjects());

		circle.setRadius(10);

		System.out.println("circle radius : " + circle.getRadius() + ", area : " + circle.getArea() + ", 생성인스턴스 갯수: "
				+ circle.getNumberOfObjects());

	}
}
```
</br>

## **상속**
상위(부모) 객체의 필드와 메소드를 하위(자식) 객체에게 물려주는 행위
자식 객체는 부모 객체를 확장하여 추가적인 필드와 메소드를 가질 수 있다. 

![[화면 캡처 2022-08-10 115642.png]]

#### 상속의 효과
- 상위 객체를 재사용해서 하위 객체를 빠르게 개발
- 코드 중복을 줄임
- 유지 보수의 편리성
- 객체의 다형성 구현
</br>

#### 상속 생성자 호출 순서
```java
public class Parent {
	int homePhoneNumber;

	public Parent() {
		System.out.println("Parent - dafualt constructor 호출");
	}

	public Parent(int homePhoneNumber) {
		this.homePhoneNumber = homePhoneNumber;
		System.out.println("Parent - Parent(int homePhoneNumber) constructor 호출");
	}
}
```
```java
public class Child extends Parent {
	
	int homePhoneNumber;

	public Child() {
		System.out.println("Child - dafualt constructor 호출");
	}

	public Child(int homePhoneNumber) {
		this.homePhoneNumber = homePhoneNumber;
		System.out.println("Child - Child(int homePhoneNumber) constructor 호출");
	}
}
```
```java
public class ConstructorEx {

	public static void main(String[] args) {
		Child c = new Child();
		System.out.println();
		Child c2 = new Child(11);
	}
}
```
실행 결과
```
Parent - dafualt constructor 호출
Child - dafualt constructor 호출

Parent - dafualt constructor 호출
Child - Child(int homePhoneNumber) constructor 호출
```
1. JVM에서 heap memory에 부모 인스턴스 생성
2. JVM에서 heap memory에 자식 인스턴스 생성
3. 부모 class인 Parent class의 default constructor 호출
4. 자식 class인 Child class의 Child(int homePhoneNumber)constructor 호출
</br>

### Object 클래스
 모든 class의 부모 class는 Object class임
	- 모든 class를 new로 인스턴스 만들 때 heap memory에 인스턴스가 생성되기 전에
	  Object class의 인스턴스가 먼저 생성됨
	- 부모가 Object class인 경우는 생략 가능 (Java가 자동으로 힙메모리에 인스턴스 생성)

```java
public class People extends Object {
	public String name;
	public String ssn;

	public People() {
		System.out.println("parent - default constructor");
	}
	
	public People(String name, String ssn) {
		super();	//Object class의 default constructor 호출
//		this();		// 본인 class의 다른 생성자 호출 가능
		this.name = name;
		this.ssn = ssn;
	}
}
```

</br>

### 메소드 오버라이드 (Method Overrides)
*cf. 오버로딩(overloading)*
 1. 부모 class의 method와 자식 class의 method의 **signature가 동일**해야 함
 2. 정의: 부모에서 정의된 메소드가 있고, 자식이 동일한 메소드 signature를 만들어 정의하면 부모 class의 method를 호출하는 것이 아니라, 자식 method를 호출하는 것
 3. 부모 메소드를 호출해도 자식 클래스에 override된 메소드가 존재하면, 자식의 method를 호출한다.
 
```java
public class Shape {

	public void paint() {
		draw();
	}
	
	public void draw() {
		System.out.println("Shape class - draw()");
	}
}
```
```java
public class Circle extends Shape {
	
	@Override 
	public void draw() {
		System.out.println("Circle class - draw()");
	}
```
```java
public class MethodOverridingEx {

	public static void main(String[] args) {
		Shape shape = new Shape();
		shape.draw();
		
		Circle circle = new Circle();
		circle.draw();
	}
}
```
실행 결과
```
Shape class - draw()
Circle class - draw()
```
</br>

아래의 경우 부모 클래스에만 정의된 메소드를 호출하였으나, 내용으로 오버라이드 된 메소드를 호출하기 때문에 결국 **자식 클래스의 오버라이드 메소드가 호출**된다.

```java
public class MethodOverridingEx2 {

	public static void main(String[] args) {
		Shape shape = new Shape();
		shape.paint();	
		
		Circle circle = new Circle();
		circle.paint(); // 부모 method인 paint 호출
	} 
}
```
실행 결과
```
Shape class - draw()
Circle class - draw()
```
</br>

### Final class
자식 class를 만들지 않는다는 의미로, final class로 선언하면 final class를 부모로 한 자식 class를 생성할 수 없다. Java library Class는 대부분 final이다.
**\+ final method** : final로 선언된 부모 method를 자식 class에서 override 할 수 없다.

</br>

## **다형성(polymorphism)**
동일한 이름의 기능이 서로 다르게 작동하는 현상으로, 객체를 부품화시키고 유지보수를 용이하게 한다. (class promotion + method override)

#### 자바의 다형성 사례
- 메소드 오버라이딩: 슈퍼클래스 메소드를 서브클래스마다 다르게 구현
- 한 클래스 내에 구현된 동일핚 이름이지만 다르게 작동하는 여러 메소드
</br>

### **promotion(자동형변환)**
- 부모 인스턴스 = 자식 인스턴스; (예: Parent parent = child;)
	1. 부모 메소드를 자식 메소드에서 override한 경우에만 해당
	2. 자동 형변환과 override 모두 충족이 될 때, 부모 메소드를 실행하는 것이 아니라, override된 자식 메소드를 실행
- 사용 목적:  source code 재사용 (재활용), 수정 최소화
</br>

#### polymorphism 사용 방법
 1. 부모 자식 클래스 만들고, method override 시킴
 2. 실제 코딩은 부모로 promotion 시켜서 override된 method 위주로 코딩
</br>

#### instanceOf (객체 타입 확인)
강제 타입 변환(casting) 전에 구현 클래스 타입을 조사한다.

